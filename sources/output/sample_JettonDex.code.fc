#pragma version =0.4.4;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

#include "sample_JettonDex.headers.fc";
#include "sample_JettonDex.stdlib.fc";
#include "sample_JettonDex.storage.fc";

;;
;; Contract JettonDex functions
;;

(slice, int, int, slice, slice) $JettonDex$_contract_init(slice $owner, slice $jettonAAddress, slice $jettonBAddress) impure inline_ref {
    var (($self'owner, $self'jettonABalance, $self'jettonBBalance, $self'jettonAAddress, $self'jettonBAddress)) = (null(), null(), null(), null(), null());
    $self'owner = $owner;
    $self'jettonABalance = 0;
    $self'jettonBBalance = 0;
    $self'jettonAAddress = $jettonAAddress;
    $self'jettonBAddress = $jettonBAddress;
    return ($self'owner, $self'jettonABalance, $self'jettonBBalance, $self'jettonAAddress, $self'jettonBAddress);
}

((slice, int, int, slice, slice), ()) $JettonDex$_fun_addJetton((slice, int, int, slice, slice) $self, int $v, slice $jetton) impure inline_ref {
    var (($self'owner, $self'jettonABalance, $self'jettonBBalance, $self'jettonAAddress, $self'jettonBAddress)) = $self;
    var ($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw) = __tact_context_get();
    throw_unless(4429, ( __tact_slice_eq_bits($self'owner, $ctx'sender) ));
    if (( __tact_slice_eq_bits($self'jettonAAddress, $jetton) )) {
        $self'jettonABalance = $self'jettonABalance + $v;
    } elseif (( __tact_slice_eq_bits($self'jettonBAddress, $jetton) )) {
        $self'jettonBBalance = $self'jettonBBalance + $v;
    } else {
        throw_unless(30979, false);
    }
    return (($self'owner, $self'jettonABalance, $self'jettonBBalance, $self'jettonAAddress, $self'jettonBAddress), ());
}

((slice, int, int, slice, slice), ()) $JettonDex$_fun_executeSwap((slice, int, int, slice, slice) $self, int $amount, slice $fromJetton) impure inline_ref {
    var (($self'owner, $self'jettonABalance, $self'jettonBBalance, $self'jettonAAddress, $self'jettonBAddress)) = $self;
    if (( __tact_slice_eq_bits($self'jettonAAddress, $fromJetton) )) {
        throw_unless(30901, ($amount <= $self'jettonABalance));
        int $amountToTransfer = (($self'jettonBBalance * $amount) / $self'jettonABalance);
        throw_unless(54383, ($amountToTransfer <= $self'jettonBBalance));
        $self'jettonABalance = $self'jettonABalance - $amount;
        $self'jettonBBalance = $self'jettonBBalance + $amountToTransfer;
    } elseif (( __tact_slice_eq_bits($self'jettonBAddress, $fromJetton) )) {
        throw_unless(23101, ($amount <= $self'jettonBBalance));
        int $amountToTransfer = (($self'jettonABalance * $amount) / $self'jettonBBalance);
        throw_unless(53516, ($amountToTransfer <= $self'jettonABalance));
        $self'jettonBBalance = $self'jettonBBalance - $amount;
        $self'jettonABalance = $self'jettonABalance + $amountToTransfer;
    } else {
        throw_unless(9633, false);
    }
    return (($self'owner, $self'jettonABalance, $self'jettonBBalance, $self'jettonAAddress, $self'jettonBAddress), ());
}

((slice, int, int, slice, slice), int) $JettonDex$_fun_getJettonABalance((slice, int, int, slice, slice) $self) impure inline_ref {
    var (($self'owner, $self'jettonABalance, $self'jettonBBalance, $self'jettonAAddress, $self'jettonBAddress)) = $self;
    return (($self'owner, $self'jettonABalance, $self'jettonBBalance, $self'jettonAAddress, $self'jettonBAddress), $self'jettonABalance);
}

((slice, int, int, slice, slice), int) $JettonDex$_fun_getJettonBBalance((slice, int, int, slice, slice) $self) impure inline_ref {
    var (($self'owner, $self'jettonABalance, $self'jettonBBalance, $self'jettonAAddress, $self'jettonBAddress)) = $self;
    return (($self'owner, $self'jettonABalance, $self'jettonBBalance, $self'jettonAAddress, $self'jettonBAddress), $self'jettonBBalance);
}

;;
;; Receivers of a Contract JettonDex
;;

(((slice, int, int, slice, slice)), ()) $JettonDex$_internal_binary_AddJetton((slice, int, int, slice, slice) $self, (int) $msg) impure inline {
    var ($self'owner, $self'jettonABalance, $self'jettonBBalance, $self'jettonAAddress, $self'jettonBAddress) = $self;
    var ($msg'amount) = $msg;
    ($self'owner, $self'jettonABalance, $self'jettonBBalance, $self'jettonAAddress, $self'jettonBAddress)~$JettonDex$_fun_addJetton($msg'amount, $Context$_get_sender(__tact_context_get()));
    return (($self'owner, $self'jettonABalance, $self'jettonBBalance, $self'jettonAAddress, $self'jettonBAddress), ());
}

(((slice, int, int, slice, slice)), ()) $JettonDex$_internal_binary_SwapRequest((slice, int, int, slice, slice) $self, (int, slice) $msg) impure inline {
    var ($self'owner, $self'jettonABalance, $self'jettonBBalance, $self'jettonAAddress, $self'jettonBAddress) = $self;
    var ($msg'amount, $msg'fromJetton) = $msg;
    ($self'owner, $self'jettonABalance, $self'jettonBBalance, $self'jettonAAddress, $self'jettonBAddress)~$JettonDex$_fun_executeSwap($msg'amount, $msg'fromJetton);
    return (($self'owner, $self'jettonABalance, $self'jettonBBalance, $self'jettonAAddress, $self'jettonBAddress), ());
}

(((slice, int, int, slice, slice)), ()) $JettonDex$_internal_binary_Deploy((slice, int, int, slice, slice) $self, (int) $deploy) impure inline {
    var ($self'owner, $self'jettonABalance, $self'jettonBBalance, $self'jettonAAddress, $self'jettonBAddress) = $self;
    var ($deploy'queryId) = $deploy;
    ($self'owner, $self'jettonABalance, $self'jettonBBalance, $self'jettonAAddress, $self'jettonBAddress)~$JettonDex$_fun_notify($DeployOk$_store_cell($DeployOk$_constructor_queryId($deploy'queryId)));
    return (($self'owner, $self'jettonABalance, $self'jettonBBalance, $self'jettonAAddress, $self'jettonBAddress), ());
}

;;
;; Get methods of a Contract JettonDex
;;

_ %getJettonABalance() method_id(68439) {
    var self = $JettonDex$_contract_load();
    var res = self~$JettonDex$_fun_getJettonABalance();
    return res;
}

_ %getJettonBBalance() method_id(115490) {
    var self = $JettonDex$_contract_load();
    var res = self~$JettonDex$_fun_getJettonBBalance();
    return res;
}

_ lazy_deployment_completed() method_id {
    return get_data().begin_parse().load_int(1);
}

;;
;; Routing of a Contract JettonDex
;;

((slice, int, int, slice, slice), int) $JettonDex$_contract_router_internal((slice, int, int, slice, slice) self, int msg_bounced, slice in_msg) impure inline_ref {
    ;; Handle bounced messages
    if (msg_bounced) {
        return (self, true);
    }
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    
    ;; Receive AddJetton message
    if (op == 3034418276) {
        var msg = in_msg~$AddJetton$_load();
        self~$JettonDex$_internal_binary_AddJetton(msg);
        return (self, true);
    }
    
    ;; Receive SwapRequest message
    if (op == 579702569) {
        var msg = in_msg~$SwapRequest$_load();
        self~$JettonDex$_internal_binary_SwapRequest(msg);
        return (self, true);
    }
    
    ;; Receive Deploy message
    if (op == 2490013878) {
        var msg = in_msg~$Deploy$_load();
        self~$JettonDex$_internal_binary_Deploy(msg);
        return (self, true);
    }
    
    return (self, false);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = -(msg_flags & 1);
    slice msg_sender_addr = __tact_verify_address(cs~load_msg_addr());
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var self = $JettonDex$_contract_load();
    
    ;; Handle operation
    int handled = self~$JettonDex$_contract_router_internal(msg_bounced, in_msg);
    
    ;; Throw if not handled
    throw_unless(130, handled);
    
    ;; Persist state
    $JettonDex$_contract_store(self);
}
